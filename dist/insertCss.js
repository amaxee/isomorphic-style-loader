"use strict";
/**
 * Isomorphic CSS style loader for Webpack
 *
 * Copyright Â© 2015-present Kriasoft, LLC. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_64_1 = __importDefault(require("base-64"));
const inserted = {};
/**
 * Remove style/link elements for specified node IDs
 * if they are no longer referenced by UI components.
 */
function removeCss(ids) {
    ids.forEach((id) => {
        var _a;
        if (--inserted[id] <= 0) {
            const elem = document.getElementById(id);
            if (elem) {
                (_a = elem.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(elem);
            }
        }
    });
}
/**
 * Example:
 *   // Insert CSS styles object generated by `css-loader` into DOM
 *   var removeCss = insertCss([[1, 'body { color: red; }']]);
 *
 *   // Remove it from the DOM
 *   removeCss();
 */
function insertCss(styles, { replace = false, prepend = false, prefix = 's' } = {}) {
    const ids = [];
    for (let i = 0; i < styles.length; i++) {
        const [moduleId, css, media, sourceMap] = styles[i];
        const id = `${prefix}${moduleId}-${i}`;
        ids.push(id);
        if (inserted[id]) {
            if (!replace) {
                inserted[id]++;
                continue;
            }
        }
        inserted[id] = 1;
        let elem = document.getElementById(id);
        let create = false;
        if (!elem) {
            create = true;
            elem = document.createElement('style');
            elem.setAttribute('type', 'text/css');
            elem.id = id;
            if (media) {
                elem.setAttribute('media', media);
            }
        }
        let cssText = css;
        if (sourceMap) {
            // skip IE9 and below, see http://caniuse.com/atob-btoa
            cssText += `\n/*# sourceMappingURL=data:application/json;base64,${base_64_1.default.encode(JSON.stringify(sourceMap))}*/`;
            cssText += `\n/*# sourceURL=${sourceMap.file}?${id}*/`;
        }
        if ('textContent' in elem) {
            elem.textContent = cssText;
        }
        else {
            // @ts-ignore false negative
            elem.styleSheet.cssText = cssText;
        }
        if (create) {
            if (prepend) {
                document.head.insertBefore(elem, document.head.childNodes[0]);
            }
            else {
                document.head.appendChild(elem);
            }
        }
    }
    return removeCss.bind(null, ids);
}
exports.default = insertCss;
//# sourceMappingURL=insertCss.js.map